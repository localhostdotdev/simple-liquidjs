#!/usr/bin/env coffee

peg = require('pegjs')
fs = require('fs')
process = require('process')
_ = require('underscore')
color = require('kleur')
Tracer = require('pegjs-backtrace')
spawnSync = require('child_process').spawnSync
u = require('./utils')

ARGV = require('minimist')(process.argv.slice(2),
  strings: ['grep', 'hidden-paths']
  boolean: ['colored', 'debug', 'compile', 'use-compiled']
  default: {
    colored: true
    debug: false
    grep: null
    'hidden-paths': ""
    compile: false
    'use-compiled': false
  }
)

options = ['_', 'colored', 'debug', 'grep', 'hidden-paths', 'compile', 'use-compiled']
extra_options = _(_.keys(ARGV)).without(...options)

if _.any(extra_options) || ARGV._.length > 1
  u.error("unrecognized options #{extra_options.join(', ')}")
  u.error("\nUSAGE: parser [OPTIONS] INPUT")
  u.error("\n  options: #{options.join(', ')}")
  u.error("\n  defaults to stdin")
  process.exit(1)

source = ARGV._[0]?.toString() || fs.readFileSync(0).toString().trim()

hiddenPaths = ARGV['hidden-paths'].split(',').map((s) -> s.trim())
hiddenPaths = _.reject(hiddenPaths, (s) -> s == "")

tracer = new Tracer source,
  showFullPath: true,
  hiddenPaths: hiddenPaths
  matchesNode: (node, state) => u.matchesNode(node, state, ARGV)

if ARGV.compile
  result = spawnSync('pegjs', ['template.pegjs'])

  if result.error
    log(result.stdout)
    error(result.stderr, ARGV)
    process.exit(1)

if ARGV['use-compiled']
  if fs.existsSync('template.js')
    try
      Template = require('./template')
    catch exception
      u.error("parser is invalid\n")
      u.log(exception)
      process.exit(1)
  else
    u.error("template.js doesn't exist, you can compile it with --compile")
    process.exit(1)
else
  Template = peg.generate(fs.readFileSync('template.pegjs', 'utf8'))

try
  result = Template.parse(source, tracer: tracer)
  u.log(tracer.getParseTreeString()) if ARGV.debug
  u.log(u.json(result))
catch exception
  u.printError(source, exception, ARGV)
  process.exit(1)
