#!/usr/bin/env coffee

peg = require('pegjs')
fs = require('fs')
process = require('process')
_ = require('underscore')
color = require('kleur')
Tracer = require('pegjs-backtrace')

log = console.log
json = (obj) -> JSON.stringify(obj, null, 2)

error = (string) =>
  if ARGV.colored
    console.error(color.red(string))
  else
    console.error(string)

printError = (source, exception) =>
  throw exception unless exception.location
  log(tracer.getBacktraceString()) if ARGV.debug
  log(source)

  start = exception.location.start
  end = exception.location.end

  error('^'.padStart(start.column, ' ').padEnd(end.column, '^')) if start
  error("#{exception.name}: at \"#{exception.found || ""}\" (#{exception.message})")

matchesNode = (node, state) =>
  return if ARGV.grep and not node.path.match(ARGV.grep)

  if state == "fail"
    if node.type  == "rule.fail"
      true
    else
      false
  else
    if node.type == "rule.match"
      true
    else
      false

ARGV = require('minimist')(process.argv.slice(2),
  strings: ['grep', 'hidden-paths']
  boolean: ['colored', 'debug']
  default: {
    colored: true
    debug: false
    grep: null
    'hidden-paths': ""
  }
)

options = ['_', 'colored', 'debug', 'grep', 'hidden-paths']
extra_options = _(_.keys(ARGV)).without(...options)

if _.any(extra_options) || ARGV._.length > 1
  console.error("unrecognized options ", extra_options.join(', '))
  console.error("\nUSAGE: parser [OPTIONS] INPUT")
  console.error("\n  options: #{options.join(', ')}")
  console.error("\n  defaults to stdin")
  process.exit(1)

source = ARGV._[0]?.toString() || fs.readFileSync(0).toString().trim()
grammar = fs.readFileSync('template.pegjs', 'utf8')
parser = peg.generate(grammar, trace: true)

hiddenPaths = ARGV['hidden-paths'].split(',').map((s) -> s.trim())
hiddenPaths = _.reject(hiddenPaths, (s) -> s == "")

tracer = new Tracer source,
  showFullPath: true,
  hiddenPaths: hiddenPaths
  matchesNode: matchesNode

try
  result = parser.parse(source, tracer: tracer)
  log(tracer.getParseTreeString()) if ARGV.debug
  log(json(result))
catch exception
  printError(source, exception)
  process.exit(1)
