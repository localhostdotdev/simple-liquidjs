#!/usr/bin/env coffee

peg = require('pegjs')
fs = require('fs')
process = require('process')
_ = require('underscore')
color = require('kleur')
Tracer = require('pegjs-backtrace')

usage = =>
  console.error("\nUSAGE: parser [--colored] [--debug] INPUT")
  console.error("\n  defaults to stdin")
  process.exit(1)

ARGV = require('minimist')(process.argv.slice(2),
  strings: ['_']
  boolean: ['colored', 'debug']
  default: {
    colored: true
    debug: false
  }
  unknown: (option) =>
    if option.startsWith("-")
      console.error("unrecognized option", option)
      usage()
)

log = console.log
json = (obj) -> JSON.stringify(obj, null, 2)

error = (string) =>
  if ARGV.colored
    console.error(color.red(string))
  else
    console.error(string)

printError = (source, exception) =>
  throw exception unless exception.location
  log(tracer.getBacktraceString()) if ARGV.debug
  log(source)

  start = exception.location.start
  end = exception.location.end

  error('^'.padStart(start.column, ' ').padEnd(end.column, '^')) if start
  error("#{exception.name}: at \"#{exception.found || ""}\" (#{exception.message})")

usage() if ARGV._.length > 1

if ARGV._.length > 0
  source = ARGV._[0].toString()
else
  source = fs.readFileSync(0).toString().trim()

grammar = fs.readFileSync('template.pegjs', 'utf8')
parser = peg.generate(grammar, trace: true)
tracer = new Tracer(source, showFullPath: true)

try
  log(json(parser.parse(source, tracer: tracer)))
  process.exit(0)
catch exception
  printError(source, exception)
  process.exit(1)
